(()=>{let t,e=[];const o=function(o){const r=(t=>{let e=[];return{addTodo:t=>{e.push(t)},getTodos:()=>e,title:t,deleteTodo:t=>{e.splice(e.indexOf(t),1),e.reduce(((t,e)=>(e.setPriority(t),t+1)),1)}}})(o);t=r,e.push(r),n.renderProjects()},n=(()=>{const t=document.querySelector("#project_list");return document.querySelector("#todo_list"),{renderProjects:function(){t.textContent="",e.forEach((e=>{!function(e){const o=r.buildProject(e);t.appendChild(o)}(e)}))}}})(),r=(()=>{function e(t,e,o=null){const n=document.createElement(t);return n.classList.add(...e),o&&function(t,e){e.forEach((e=>{t.appendChild(e)}))}(n,o),n}function o(t){const e=document.createElement("i");return e.classList.add("fas",`fa-${t}`),e}return{buildTodo:function(t){},buildProject:function(r){const c=e("button",["proj-btn","sel-btn"]);c.textContent=r.title,c.addEventListener("click",(()=>{t=r,n.renderTodos(r)}));const d=e("button",["proj-btn","edit-btn"],[o("edit")]),u=e("button",["proj-btn","del-btn"],[o("trash-alt")]);return e("div",["proj"],[c,d,u])}}})();o("Proj 1"),document.forms.todoForm,document.querySelector("#new_todo"),document.forms.projForm,document.querySelector("#new_project")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,