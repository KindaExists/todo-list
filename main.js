(()=>{let e,t=[];const d={newProject:function(d){const o=(e=>{let t=[];return{addTodo:e=>{t.push(e)},getTodos:()=>t,title:e,deleteTodo:e=>{t.splice(t.indexOf(e),1),t.reduce(((e,t)=>(t.setPriority(e),e+1)),1)}}})(d);e=o,t.push(o),n.renderProjects()}},n=(()=>{const e=document.querySelector("#project_list");return document.querySelector("#todo_list"),{renderProjects:function(){e.textContent="",t.forEach((t=>{!function(t){const d=o.buildProject(t);e.appendChild(d)}(t)}))}}})(),o=(()=>{function t(e,t,d=null){const n=document.createElement(e);return n.classList.add(...t),d&&function(e,t){t.forEach((t=>{e.appendChild(t)}))}(n,d),n}function d(e){const t=document.createElement("i");return t.classList.add("fas",`fa-${e}`),t}return{buildTodo:function(e){},buildProject:function(o){const s=t("button",["proj-btn","sel-btn"]);s.textContent=o.title,s.addEventListener("click",(()=>{e=o,n.renderTodos(o)}));const r=t("button",["proj-btn","edit-btn"],[d("edit")]),c=t("button",["proj-btn","del-btn"],[d("trash-alt")]);return t("div",["proj"],[s,r,c])}}})();d.newProject("Proj 1");const s=document.forms.todoForm,r=document.querySelector("#new_todo"),c=document.forms.projForm,i=document.querySelector("#new_proj");i.addEventListener("click",(()=>{i.classList.add("hidden"),c.parentNode.classList.remove("hidden")})),c.addEventListener("keydown",(e=>{"Escape"===e.key&&(i.classList.remove("hidden"),c.parentNode.classList.add("hidden"),c.reset())})),c.addEventListener("submit",(()=>{i.classList.remove("hidden"),c.parentNode.classList.add("hidden"),d.newProject(c.title.value),c.reset()})),r.addEventListener("click",(()=>{r.classList.add("hidden"),s.parentNode.classList.remove("hidden")})),s.addEventListener("reset",(()=>{r.classList.remove("hidden"),s.parentNode.classList.add("hidden")})),s.addEventListener("keydown",(e=>{"Escape"===e.key&&(r.classList.remove("hidden"),s.parentNode.classList.add("hidden"))})),s.addEventListener("submit",(()=>{r.classList.remove("hidden"),s.parentNode.classList.add("hidden"),d.newTodo(e,s.title.value,s.date.value,s.done.checked,s.desc.value),s.reset()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,